What happens when you initialize a repository? Why do you need to do it?

A .git file for the repository is created. To store the git metadata for the repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is intermediate and doesn't exist in either the repository or the working memory. It serves as a "scratch pad" letting you add and remove files from the workign directory before committing.

How can you use the staging area to make sure you have one commit per logical change?

Use git diff --staged to make sure there is only one logical difference between previous commit and files in the staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Experimenting with a new feature, changing the language, fundamentally changing the logic of the code, etc. Keeps the changes self contained in their own seperate space.

How do the diagrams help you visualize the branch structure?

Provide a tree like structure that lets you see the flow of commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

All of the changes in both branches are commited to a single repository. Because for all intents and purposes two repositories have become one.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git doesn't ask you to resolve every difference in a merge - if something is new or present in the original it automatically include sit. However, it does make you resolve conflits between documnets in merge because it is not capable of deciding what is best. This is for the best as it gives you control of what change you want to accept.